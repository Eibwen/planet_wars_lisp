# -*- mode: org -*-
Common Lisp Starter Package for Planet Wars

This file contains specific information about the Common Lisp (CL)
starter package for the [[http://ai-contest.com/][Planet Wars Google AI Challenge]].

* Usage

First, read the [[http://ai-contest.com/using_the_tools.php][Using the Tools]] page on the contest site. This
explains how to run to example bots against each other. The CL starter
package contains the same tools and example bots, so you can use the
same invocation to run an example:

:  java -jar tools/PlayGame.jar maps/map7.txt 1000 1000 log.txt "java -jar example_bots/RandomBot.jar" "java -jar example_bots/DualBot.jar" | java -jar tools/ShowGame.jar

Note that Java needs to be installed on your system!

To compile the bot run =make= that should =REQUIRE= the planet-wars
system and save the image as an executable name =MyBot=. The
invocation to run the CL bot is almost the same as the above but
replaces the first bot with a call to =MyBot=:

:  java -jar tools/PlayGame.jar maps/map7.txt 1000 1000 log.txt "./MyBot" "java -jar example_bots/DualBot.jar" | java -jar tools/ShowGame.jar

Check the shell scripts in the `bin` directory for more examples on
how to run this bot.

** Bot timing out locally

You will almost certainly need to compile `parse-number.lisp` and
`split-sequence.lisp`, otherwise SBCL will take too long to start up
and your bot will time out. The `bin/compile-libs.sh` script will
compile them.

*Note*: This is not a problem when submitting your code to the server
since it will be compiled first there.

** Submitting the bot

The `bin/make-dist.sh' script creates a zip file that can be used to
submit a bot to the competition. Once submitted your code is compiled
using a Makefile not unlike the one that came with this package, so be
sure to test a compiled version of your bot before submitting.

At the time of this writing I do not know whether SBCL will be run
with a custom dynamic space size so that option is not set yet.

*** TODO automatically submit the zip file to the server with `curl`

** ProxyBot

To make working on your bot a little more natural / lispy I've
included a proxy bot. This bot does nothing in itself except connect
to another bot running at 127.0.0.1:41807 and pass game state and bot
orders back and forth to the game engine and the other bot.

This means you can keep your bot running in a permanent, in my case,
Emacs + Slime session while the proxy bot is the one that gets started
up and shut down every time. So you don't have to recompile your bot
every time in case it times out, but more importantly you don't lose
your bot's state when it crashes since you'll just drop into the
debugger and can inspect the situation.

However, there's a slight speed penalty because of the extra code and
communications.

In SBCL 

 =(pw:start-server-for-proxy-bot :one-shot t)=

*** Running the ProxyBot

*(this section assumes Slime defaults)*

First, compile the proxy bot with =make ProxyBot= then assuming there
is a real bot to connect to, it is as easy to use as running:

  java -jar tools/PlayGame.jar maps/map7.txt 1000 1000 /dev/null "./ProxyBot" "java -jar example_bots/DualBot.jar" | java -jar tools/ShowGame.jar

If that fails (proxy bot times out) check =proxy-bot.log=.
